name: Check ofrecimientos & trigger ETL

on:
  schedule:
    # cada 5 minutos, Lunes–Viernes, 09–17 UTC (equivale a 06–14 ART)
    - cron: "*/5 9-17 * * 1-5"
  workflow_dispatch:

permissions:
  contents: write # para commitear el estado (hash)

concurrency:
  group: check-ofrecimientos
  cancel-in-progress: true

jobs:
  check-and-trigger:
    runs-on: ubuntu-latest

    env:
      # Ofrecimientos
      STATE_FILE_OFREC: .state_ofrec_hash
      OFREC_PATH: ofrecimientos.parquet
      # Avisos (core.verificar_avisos genera ESTE archivo)
      STATE_FILE_AVISOS: .state_avisos_hash
      AVISOS_PATH: data/avisos.csv
      # Evento para el workflow "General"
      EVENT_TYPE: ofrecimientos-changed
      TARGET_OWNER: ofrecimientos-docentes
      TARGET_REPO: etl-ofrecimientos-docentes

    steps:
      - name: Checkout (main)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # -------- Verificación de ofrecimientos --------
      - name: Run scraper/verifier (ofrecimientos)
        run: |
          python - << 'PY'
          from verify import main
          if __name__ == "__main__":
              main()
          PY

      - name: Compute current hash (ofrecimientos)
        id: hash_ofrec
        run: |
          if [ ! -f "${OFREC_PATH}" ]; then
            echo "Parquet no encontrado: ${OFREC_PATH}"
            exit 1
          fi
          CURR_HASH=$(sha256sum "${OFREC_PATH}" | awk '{print $1}')
          echo "curr_hash=${CURR_HASH}" >> $GITHUB_OUTPUT

      - name: Load previous hash (ofrecimientos)
        id: prev_ofrec
        run: |
          if [ -f "${STATE_FILE_OFREC}" ]; then
            PREV_HASH=$(cat "${STATE_FILE_OFREC}")
          else
            PREV_HASH=""
          fi
          echo "prev_hash=${PREV_HASH}" >> $GITHUB_OUTPUT

      # -------- Verificación de avisos --------
      - name: Run verifier (avisos)
        run: |
          python -m core.verificar_avisos  # genera data/avisos.csv

      - name: Compute current hash (avisos)
        id: hash_avisos
        run: |
          if [ ! -f "${AVISOS_PATH}" ]; then
            echo "Archivo de avisos no encontrado: ${AVISOS_PATH}"
            exit 1
          fi
          CURR_HASH=$(sha256sum "${AVISOS_PATH}" | awk '{print $1}')
          echo "curr_hash=${CURR_HASH}" >> $GITHUB_OUTPUT

      - name: Load previous hash (avisos)
        id: prev_avisos
        run: |
          if [ -f "${STATE_FILE_AVISOS}" ]; then
            PREV_HASH=$(cat "${STATE_FILE_AVISOS}")
          else
            PREV_HASH=""
          fi
          echo "prev_hash=${PREV_HASH}" >> $GITHUB_OUTPUT

      # -------- Detección de cambios y persistencia --------
      - name: Detect changes & persist state (on main)
        id: detect
        shell: bash
        run: |
          changed_ofrec=false
          changed_avisos=false

          if [ "${{ steps.hash_ofrec.outputs.curr_hash }}" != "${{ steps.prev_ofrec.outputs.prev_hash }}" ] || [ -z "${{ steps.prev_ofrec.outputs.prev_hash }}" ]; then
            changed_ofrec=true
            echo "${{ steps.hash_ofrec.outputs.curr_hash }}" > "${STATE_FILE_OFREC}"
          fi

          if [ "${{ steps.hash_avisos.outputs.curr_hash }}" != "${{ steps.prev_avisos.outputs.prev_hash }}" ] || [ -z "${{ steps.prev_avisos.outputs.prev_hash }}" ]; then
            changed_avisos=true
            echo "${{ steps.hash_avisos.outputs.curr_hash }}" > "${STATE_FILE_AVISOS}"
          fi

          echo "changed_ofrec=${changed_ofrec}"   >> $GITHUB_OUTPUT
          echo "changed_avisos=${changed_avisos}" >> $GITHUB_OUTPUT

          if [ "${changed_ofrec}" = "true" ] || [ "${changed_avisos}" = "true" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "${STATE_FILE_OFREC}" "${STATE_FILE_AVISOS}" 2>/dev/null || true
            git commit -m "update state hashes (ofrecimientos/avisos)" || echo "Nada para commitear"
            git push origin main || echo "No se pudo pushear (ok si no hay cambios reales)"
            echo "changed_any=true" >> $GITHUB_OUTPUT
          else
            echo "Sin cambios en ofrecimientos ni avisos."
            echo "changed_any=false" >> $GITHUB_OUTPUT
          fi

      # -------- Disparo del ETL --------
      - name: Trigger ETL via repository_dispatch
        if: steps.detect.outputs.changed_any == 'true'
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "Disparando evento ${EVENT_TYPE} a ${TARGET_OWNER}/${TARGET_REPO}"
          curl -sS -L -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${TARGET_OWNER}/${TARGET_REPO}/dispatches \
            -d "{\"event_type\":\"${EVENT_TYPE}\",\"client_payload\":{
                  \"ofrec_hash\":\"${{ steps.hash_ofrec.outputs.curr_hash }}\",
                  \"avisos_hash\":\"${{ steps.hash_avisos.outputs.curr_hash }}\",
                  \"changed_ofrec\":\"${{ steps.detect.outputs.changed_ofrec }}\",
                  \"changed_avisos\":\"${{ steps.detect.outputs.changed_avisos }}\"
                }}"
